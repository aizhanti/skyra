{"version":3,"sources":["img/icon.png","img/phone_image.png","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","userId","setUserId","isLoggedIn","setIsLoggedIn","loginBtnRef","useRef","loginText","getUserId","window","liff","getProfile","then","profile","profileName","displayName","console","log","catch","err","Buttons","className","id","onClick","fetch","res","JSON","stringify","data","useEffect","reqResponse","body","json","jsonResponse","myLiffId","init","liffId","idToken","getDecodedIDToken","initializeLiff","initializeLiffOrDie","error","setTimeout","current","style","display","innerText","setInterval","date","Date","getSeconds","src","icon","ref","login","redirectUri","phone","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d8782be7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.d8a449e3.png\";","module.exports = __webpack_public_path__ + \"static/media/phone_image.0603363a.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport icon from \"./img/icon.png\";\nimport phone from \"./img/phone_image.png\";\n// import Horoscope from \"./horoscope\"\n\nfunction App() {\n  // let myLiffId = \"1654236980-8Pzx0pWj\"\n\n  const [userId, setUserId] = useState(\"\");\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const loginBtnRef = useRef();\n  const loginText = useRef();\n\n  //this is just for testing. will delete this later\n  // const [fakeStatus, setFakeStatus] = useState(true);\n\n  useEffect(() => {\n    initialize();\n    setTimeout(() => {\n      if (window.liff.isLoggedIn()) {\n        getUserId();\n        getUserId();\n      }\n    }, 2500);\n  }, []);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      loginBtnRef.current.style.display = \"none\";\n      loginText.current.innerText = \"Welcome to SKYRA!\";\n    }\n  }, [isLoggedIn]);\n\n  function initialize() {\n    let myLiffId = \"\";\n\n    fetch(\"/send-id\")\n      .then(function (reqResponse) {\n        console.log(\"reqResponse\", reqResponse.body);\n        return reqResponse.json();\n      })\n      .then(function (jsonResponse) {\n        console.log(\"jsonresponseeee\", jsonResponse);\n        myLiffId = jsonResponse.id;\n        initializeLiffOrDie(myLiffId);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  function initializeLiffOrDie(myLiffId) {\n    if (!myLiffId) {\n      // document.getElementById(\"liffAppContent\").classList.add('hidden');\n      // document.getElementById(\"liffIdErrorMessage\").classList.remove('hidden');\n    } else {\n      initializeLiff(myLiffId);\n    }\n  }\n\n  function initializeLiff(myLiffId) {\n    console.log(\"myLIffid--------->\", myLiffId);\n    console.log(\"Is user logged in????\", window.liff.isLoggedIn);\n    window.liff\n      .init({\n        liffId: myLiffId,\n      })\n      .then(() => {\n        // start to use LIFF's api\n        initializeApp();\n        const idToken = window.liff.getDecodedIDToken();\n        console.log(\"app.js line68 initializeLiff -> idToken*****\", idToken);\n      })\n      .catch((err) => {\n        console.log(err);\n        // document.getElementById(\"liffAppContent\").classList.add('hidden');\n        // document.getElementById(\"liffInitErrorMessage\").classList.remove('hidden');\n      });\n  }\n\n  function initializeApp() {\n    // displayLiffData();\n    // displayIsInClientInfo();\n    // registerButtonHandlers();\n\n    // check if the user is logged in/out, and disable inappropriate button\n    if (window.liff.isLoggedIn()) {\n      // document.getElementById('liffLoginButton').disabled = true;\n    } else {\n      // document.getElementById('liffLogoutButton').disabled = true;\n    }\n  }\n\n  function loginClick() {\n    if (!window.liff.isLoggedIn()) {\n      console.log(\n        \"loginClick -> window.liff.isLoggedIn()******\",\n        window.liff.isLoggedIn()\n      );\n      // set `redirectUri` to redirect the user to a URL other than the front page of your LIFF app\n      window.liff.login({ redirectUri: \"http://localhost:3000\" });\n      console.log(\"Before login*******\");\n      //window.liff.login();\n    }\n  }\n\n  function getUserId() {\n    if (window.liff.isLoggedIn()) {\n      window.liff\n        .getProfile()\n        .then((profile) => {\n          const profileName = profile.displayName;\n          // localStorage.setItem(\"profile\", profile)\n          setIsLoggedIn(window.liff.isLoggedIn());\n          setUserId(profile.userId);\n          // setTimeout(() => {\n          console.log(\n            \"app.js profile name, userid line103 ========>\",\n            profileName,\n            userId\n          );\n          // }, 3000)\n        })\n        .catch((err) => {\n          console.log(\"error\", err);\n        });\n    }\n  }\n\n  function time() {\n    // Set interval for checking\n\n    var date = new Date();\n    // Create a Date object to find out what time it is\n    // if(date.getHours() === 0 && date.getMinutes() === 38 && date.getSeconds() === 0){\n    if (date.getSeconds() === 0) {\n      // Check the time\n      console.log(\"now is\", date);\n      sendMessages();\n    }\n  }\n\n  let interval;\n  // window.clearInterval(interval)\n  window.setInterval(time, 1000);\n\n  function sendMessages() {\n    getUserId();\n    fetch(`/send-messages?userId=${userId}`).then((res) =>\n      console.log(\"THIS IS A RESPONSE FOR MESSAGES!!------>\", res)\n    );\n  }\n\n  function sendJoke() {\n    getUserId();\n    console.log(\"inside sendJoke\", userId);\n\n    fetch(`/joke?userId=${userId}`).then((res) =>\n      console.log(\n        \"THIS IS A RESPONSE FOR JOKES!!------>\",\n        JSON.stringify(res.data)\n      )\n    );\n  }\n\n  function sendCovidStatus() {\n    getUserId();\n    console.log(\"inside CovidStatus\", userId);\n    fetch(`/covid?userId=${userId}`).then((res) =>\n      console.log(\"THIS IS A RESPONSE FOR COVID!!------>\", res)\n    );\n  }\n\n  function sendWeather() {\n    getUserId();\n    console.log(\"***inside sendWeather****\", userId);\n    fetch(`/weather?userId=${userId}`).then((res) =>\n      console.log(\"THIS IS A RESPONSE FOR weather !!------>\", res)\n    );\n  }\n\n  function sendFortune() {\n    getUserId();\n    console.log(\"***inside sendFortune ****\", userId);\n    fetch(`/fortune?userId=${userId}`).then((res) =>\n      console.log(\"THIS IS A RESPONSE FOR fortune !!------>\", res)\n    );\n  }\n\n  function sendNews() {\n    getUserId();\n    fetch(`/news?userId=${userId}`).then((res) =>\n      console.log(\"THIS IS A RESPONSE FOR news !!------>\", res)\n    );\n  }\n\n  function Buttons() {\n    if (isLoggedIn) {\n      return (\n        <>\n          <div className=\"buttonRow\">\n            <button\n              id=\"sendMessageButton\"\n              className=\"liffLoginButton\"\n              onClick={() => sendNews()}\n            >\n              Get News\n            </button>\n            <button\n              id=\"scanQrCodeButton\"\n              className=\"liffLoginButton\"\n              onClick={() => sendCovidStatus()}\n            >\n              Get COVID Status\n            </button>\n            <button\n              id=\"sendMessageButton\"\n              className=\"liffLoginButton\"\n              onClick={() => sendWeather()}\n            >\n              Get Weather\n            </button>\n            <button\n              id=\"sendMessageButton\"\n              className=\"liffLoginButton\"\n              onClick={() => sendFortune()}\n            >\n              Get Your Fortune\n            </button>\n            <button\n              id=\"sendMessageButton\"\n              className=\"liffLoginButton\"\n              onClick={() => sendJoke()}\n            >\n              Get Joke\n            </button>\n          </div>\n          {/* <div className=\"buttonRow\">\n      <button id=\"getAccessToken\" className=\"liffLoginButton\">Get Access Token</button>\n      <button id=\"getProfileButton\" className=\"liffLoginButton\">Get Profile</button>\n      </div> */}\n        </>\n      );\n    } else {\n      return <h1></h1>;\n      // return  <h1 className=\"plzlogin\">please login first</h1>\n    }\n  }\n  // else {\n  //  return  <h1>please login first</h1>\n  // }\n  // }\n\n  return (\n    <div className=\"App\">\n      <div id=\"liffAppContent\">\n        <div className={\"intro-section\"}>\n          <div className=\"title-wrapper\">\n            <p id=\"title\">SKYRA</p>\n          </div>\n\n          <img id=\"icon\" src={icon}></img>\n          <p className=\"marketInfo\">\n            Subscribe to SKYRA to get COVID-19 stats, Dad Jokes, Fortunes and\n            more delivered to your LINE daily.\n          </p>\n          <p ref={loginText} className=\"marketInfo\">\n            Start by logging into your LINE account\n          </p>\n          <button\n            ref={loginBtnRef}\n            className=\"liffLoginButton\"\n            onClick={() => loginClick()}\n          >\n            Log in\n          </button>\n        </div>\n        <div className=\"add-assistant-section\">\n          <p className=\"market-subInfo\">\n            Use this QR code to add SKYRA to your LINE and wait for the\n            messages!\n          </p>\n          <img className=\"phone_pic\" src={phone}></img>\n          <img className=\"qrcode\" src=\"/151tshrj.png\"></img>\n          <p className=\"market-subInfo\">\n            You will get a message every morning at 10:00(JST)\n          </p>\n        </div>\n        {/* <!-- ACTION BUTTONS --> */}\n        <div className=\"buttonGroup\">\n          {/* <div className=\"buttonRow\">\n            </div> */}\n          <Buttons />\n          {/* <div className=\"buttonRow\"></div>\n              <button id=\"scanQrCodeButton\" className=\"liffLoginButton\" onClick={() => sendCovidStatus()}>\n                Get COVID Status\n              </button>\n              <button id=\"sendMessageButton\" className=\"liffLoginButton\" onClick={() => sendJoke()}>\n                Get Joke\n              </button>\n              <button id=\"sendMessageButton\" className=\"liffLoginButton\" onClick={() => sendFortune()}>\n                Get Your Fortune\n              </button>\n              <button id=\"sendMessageButton\" className=\"liffLoginButton\" onClick={() => sendNews()}>\n                Get News\n              </button> \n            </div> */}\n          {/* <p>How about your Horoscope?</p> */}\n          {/* <Horoscope sign={sign} day={day}/>x */}\n          {/* <div className=\"buttonRow\">\n              <button id=\"getAccessToken\" className=\"liffLoginButton\">Get Access Token</button>\n              <button id=\"getProfileButton\" className=\"liffLoginButton\">Get Profile</button>\n            </div> */}\n        </div>\n        <div id=\"hooter\">© SKYRA 2020. All rights reserved.</div>\n        <div id=\"shareTargetPickerMessage\"></div>\n        {/* <!-- ACCESS TOKEN DATA --> */}\n        <div id=\"accessTokenData\" className=\"hidden textLeft\">\n          <h2>Access Token</h2>\n          <a href=\"#\">Close Access Token</a>\n          <table>\n            <tr>\n              <th>accessToken</th>\n              <td id=\"accessTokenField\"></td>\n            </tr>\n          </table>\n        </div>\n        {/* <!-- SCAN QR RESULT --> */}\n        <div id=\"scanQr\" className=\"hidden textLeft\">\n          <h2>QR Code reader</h2>\n          <a href=\"#\">Close QR Code Reader Result</a>\n          <table>\n            <tr>\n              <th>scanCode Result</th>\n              <td id=\"scanQrField\"></td>\n            </tr>\n          </table>\n        </div>\n        {/* <!-- PROFILE INFO --> */}\n        <div id=\"profileInfo\" className=\"hidden textLeft\">\n          <h2>Profile</h2>\n          <a href=\"#\">Close Profile</a>\n          <div id=\"profilePictureDiv\"></div>\n          <table>\n            <tr>\n              <th>userId</th>\n              <td id=\"userIdProfileField\"></td>\n            </tr>\n            <tr>\n              <th>displayName</th>\n              <td id=\"displayNameField\"></td>\n            </tr>\n            <tr>\n              <th>statusMessage</th>\n              <td id=\"statusMessageField\"></td>\n            </tr>\n          </table>\n        </div>\n        {/* <!-- LOGIN LOGOUT BUTTONS --> */}\n        {/* <div className=\"buttonGroup\">\n            <button id=\"liffLoginButton\" >Log in</button>\n            <button id=\"liffLogoutButton\">Log out</button>\n          </div> */}\n        {/* <div id=\"statusMessage\">\n            <div id=\"isInClientMessage\"></div>\n            <div id=\"apiReferenceMessage\">\n              <p>\n                Available LIFF methods vary depending on the browser you use to\n                open the LIFF app.\n              </p>\n              <p>\n                Please refer to the{\" \"}\n                <a href=\"https://developers.line.biz/en/reference/liff/#initialize-liff-app\">\n                  API reference page\n                </a>{\" \"}\n                for more information.\n              </p>\n            </div>\n          </div> */}\n      </div>\n      {/* <!-- LIFF ID ERROR --> */}\n      <div id=\"liffIdErrorMessage\" className=\"hidden\">\n        <p>You have not assigned any value for LIFF ID.</p>\n        <p>\n          If you are running the app using Node.js, please set the LIFF ID as an\n          environment variable in your Heroku account follwing the below steps:{\" \"}\n        </p>\n        <code id=\"code-block\">\n          <ol>\n            <li>Go to `Dashboard` in your Heroku account.</li>\n            <li>Click on the app you just created.</li>\n            <li>Click on `Settings` and toggle `Reveal Config Vars`.</li>\n            <li>Set `MY_LIFF_ID` as the key and the LIFF ID as the value.</li>\n            <li>\n              Your app should be up and running. Enter the URL of your app in a\n              web browser.\n            </li>\n          </ol>\n        </code>\n        <p>\n          If you are using any other platform, please add your LIFF ID in the{\" \"}\n          <code>index.html</code> file.\n        </p>\n        <p>\n          For more information about how to add your LIFF ID, see{\" \"}\n          <a href=\"https://developers.line.biz/en/reference/liff/#initialize-liff-app\">\n            Initializing the LIFF app\n          </a>\n          .\n        </p>\n      </div>\n      {/* <!-- LIFF INIT ERROR --> */}\n      <div id=\"liffInitErrorMessage\" className=\"hidden\">\n        <p>Something went wrong with LIFF initialization.</p>\n        <p>\n          LIFF initialization can fail if a user clicks \"Cancel\" on the \"Grant\n          permission\" screen, or if an error occurs in the process of{\" \"}\n          <code>liff.init()</code>.\n        </p>\n      </div>\n      {/* <!-- NODE.JS LIFF ID ERROR --> */}\n      <div id=\"nodeLiffIdErrorMessage\" className=\"hidden\">\n        <p>Unable to receive the LIFF ID as an environment variable.</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}