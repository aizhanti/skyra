{"version":3,"sources":["img/icon.png","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","userId","setUserId","getUserId","window","liff","getProfile","then","profile","profileName","displayName","console","log","catch","err","useEffect","fetch","reqResponse","body","json","jsonResponse","myLiffId","init","liffId","isLoggedIn","idToken","getDecodedIDToken","initializeLiff","initializeLiffOrDie","id","error","className","src","icon","onClick","login","res","JSON","stringify","data","sign","day","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ed653d6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.d8a449e3.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState, useEffect, useRef } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport icon from \"./img/icon.png\";\r\nimport horoscope from \"./horoscope\"\r\n\r\nfunction App() {\r\n\r\n  //To Do: properly hook up horoscope component line:165\r\n  let sign=\"virgo\"\r\n  let day=\"today\"\r\n  // ^^ the above is for the horoscope component line:165\r\n\r\n  const [userId, setUserId] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    initialize();\r\n  }, []);\r\n\r\n\r\n  function sendMessages() {\r\n    fetch(\"/send-messages\", { mode: \"cors\" }).then((res) => console.log(res));\r\n  }\r\n\r\n  function initialize() {\r\n    let myLiffId = \"\";\r\n\r\n    fetch(\"/send-id\")\r\n      .then(function (reqResponse) {\r\n        console.log(\"reqResponse\", reqResponse.body);\r\n        return reqResponse.json();\r\n      })\r\n      .then(function (jsonResponse) {\r\n        console.log(\"jsonresponseeee\", jsonResponse);\r\n        myLiffId = jsonResponse.id;\r\n        initializeLiffOrDie(myLiffId);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function initializeLiffOrDie(myLiffId) {\r\n    if (!myLiffId) {\r\n      // document.getElementById(\"liffAppContent\").classList.add('hidden');\r\n      // document.getElementById(\"liffIdErrorMessage\").classList.remove('hidden');\r\n    } else {\r\n      initializeLiff(myLiffId);\r\n    }\r\n  }\r\n\r\n  function initializeLiff(myLiffId) {\r\n    console.log(\"myLIffid--------->\", myLiffId);\r\n    window.liff\r\n      .init({\r\n        liffId: myLiffId,\r\n\r\n      })\r\n      .then(() => {\r\n        // start to use LIFF's api\r\n        initializeApp();\r\n        const idToken = window.liff.getDecodedIDToken();\r\n        console.log(\"app.js line68 initializeLiff -> idToken*****\", idToken);\r\n        \r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        // document.getElementById(\"liffAppContent\").classList.add('hidden');\r\n        // document.getElementById(\"liffInitErrorMessage\").classList.remove('hidden');\r\n      });\r\n  }\r\n\r\n  function initializeApp() {\r\n    // displayLiffData();\r\n    // displayIsInClientInfo();\r\n    // registerButtonHandlers();\r\n\r\n    // check if the user is logged in/out, and disable inappropriate button\r\n    if (window.liff.isLoggedIn()) {\r\n      // document.getElementById('liffLoginButton').disabled = true;\r\n    } else {\r\n      // document.getElementById('liffLogoutButton').disabled = true;\r\n    }\r\n  }\r\n\r\n  function loginClick() {\r\n    if (!window.liff.isLoggedIn()) {\r\n      console.log(\"loginClick -> window.liff.isLoggedIn()******\", window.liff.isLoggedIn())\r\n      // set `redirectUri` to redirect the user to a URL other than the front page of your LIFF app.\r\n     \r\n      //window.liff.login({ redirectUri: \"http://localhost:3000\" });\r\n      console.log(\"Before login*******\")\r\n      window.liff.login();\r\n      console.log(\"After login****\")\r\n      getUserId();\r\n      console.log(\"After login getuserID()******\")\r\n      \r\n    }\r\n  }\r\n\r\n  function getUserId() {\r\n    window.liff\r\n      .getProfile()\r\n      .then((profile) => {\r\n        const profileName = profile.displayName;\r\n        setUserId(profile.userId);\r\n        // setTimeout(() => {\r\n          console.log(\"app.js profile name, userid line103 ========>\", profileName, userId);\r\n        // }, 3000)\r\n\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"error\", err);\r\n      });\r\n  }\r\n\r\n  function sendJoke() {\r\n    getUserId();\r\n    console.log(\"inside sendJoke\", userId)\r\n\r\n    fetch(`/send-joke?userId=${userId}`).then((res) =>\r\n      console.log(\"THIS IS A RESPONSE FOR JOKES!!------>\", JSON.stringify(res.data))\r\n    );\r\n  }\r\n\r\n\r\n  function getCovidStatus() {\r\n    getUserId();\r\n    console.log(\"inside CovidStatus\", userId)\r\n    fetch(`/get-covid-status?userId=${userId}`).then((res) =>\r\n      console.log(\"THIS IS A RESPONSE FOR COVID!!------>\", res)\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div id=\"liffAppContent\">\r\n      <div className={\"intro-section\"}>\r\n      <p id=\"title\">SKYRA</p>\r\n      <img id=\"icon\" src={icon}></img>\r\n      <p>Subcribe to our product to get COVID-19 stats and Dad Jokes delivered to your Line daily.</p>\r\n      <p>Start by logging into your line account</p>\r\n      <button className=\"liffLoginButton\" onClick={() => loginClick()}>\r\n            Log in\r\n          </button>\r\n      </div>\r\n      <div className={\"add-assistant-section\"}>\r\n      <p>Use this QR code to add the assistant to your Line and wait for the messages!</p>\r\n      <img id=\"qrcode\" src=\"/151tshrj.png\"></img>\r\n      <p>You will get a message every morning at 10:00 (JST/EST) (?)</p>\r\n      <p>Maybe add a screenshot here of the line message</p>\r\n      </div>\r\n        {/* <!-- ACTION BUTTONS --> */}\r\n        <div className=\"buttonGroup\">\r\n          <div className=\"buttonRow\">\r\n          </div>\r\n          <div className=\"buttonRow\">\r\n            <button id=\"scanQrCodeButton\" className=\"liffLoginButton\" onClick={() => getCovidStatus()}>\r\n              Get COVID Status\r\n            </button>\r\n            <button id=\"sendMessageButton\" className=\"liffLoginButton\" onClick={() => sendJoke()}>\r\n              Send Joke\r\n            </button>\r\n          </div>\r\n          <p>How about your Horoscope?</p>\r\n          <horoscope sign={sign} day={day}/>\r\n          <div className=\"buttonRow\">\r\n            <button id=\"getAccessToken\" className=\"liffLoginButton\">Get Access Token</button>\r\n            <button id=\"getProfileButton\" className=\"liffLoginButton\">Get Profile</button>\r\n          </div>\r\n        </div>\r\n        <div id=\"hooter\">Â© SKYRA 2020. All rights reserved.</div>\r\n        <div id=\"shareTargetPickerMessage\"></div>\r\n        {/* <!-- ACCESS TOKEN DATA --> */}\r\n        <div id=\"accessTokenData\" className=\"hidden textLeft\">\r\n          <h2>Access Token</h2>\r\n          <a href=\"#\">Close Access Token</a>\r\n          <table>\r\n            <tr>\r\n              <th>accessToken</th>\r\n              <td id=\"accessTokenField\"></td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n        {/* <!-- SCAN QR RESULT --> */}\r\n        <div id=\"scanQr\" className=\"hidden textLeft\">\r\n          <h2>QR Code reader</h2>\r\n          <a href=\"#\">Close QR Code Reader Result</a>\r\n          <table>\r\n            <tr>\r\n              <th>scanCode Result</th>\r\n              <td id=\"scanQrField\"></td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n        {/* <!-- PROFILE INFO --> */}\r\n        <div id=\"profileInfo\" className=\"hidden textLeft\">\r\n          <h2>Profile</h2>\r\n          <a href=\"#\">Close Profile</a>\r\n          <div id=\"profilePictureDiv\"></div>\r\n          <table>\r\n            <tr>\r\n              <th>userId</th>\r\n              <td id=\"userIdProfileField\"></td>\r\n            </tr>\r\n            <tr>\r\n              <th>displayName</th>\r\n              <td id=\"displayNameField\"></td>\r\n            </tr>\r\n            <tr>\r\n              <th>statusMessage</th>\r\n              <td id=\"statusMessageField\"></td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n        {/* <!-- LOGIN LOGOUT BUTTONS --> */}\r\n        {/* <div className=\"buttonGroup\">\r\n          <button id=\"liffLoginButton\" >Log in</button>\r\n          <button id=\"liffLogoutButton\">Log out</button>\r\n        </div> */}\r\n        {/* <div id=\"statusMessage\">\r\n          <div id=\"isInClientMessage\"></div>\r\n          <div id=\"apiReferenceMessage\">\r\n            <p>\r\n              Available LIFF methods vary depending on the browser you use to\r\n              open the LIFF app.\r\n            </p>\r\n            <p>\r\n              Please refer to the{\" \"}\r\n              <a href=\"https://developers.line.biz/en/reference/liff/#initialize-liff-app\">\r\n                API reference page\r\n              </a>{\" \"}\r\n              for more information.\r\n            </p>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n      {/* <!-- LIFF ID ERROR --> */}\r\n      <div id=\"liffIdErrorMessage\" className=\"hidden\">\r\n        <p>You have not assigned any value for LIFF ID.</p>\r\n        <p>\r\n          If you are running the app using Node.js, please set the LIFF ID as an\r\n          environment variable in your Heroku account follwing the below steps:{\" \"}\r\n        </p>\r\n        <code id=\"code-block\">\r\n          <ol>\r\n            <li>Go to `Dashboard` in your Heroku account.</li>\r\n            <li>Click on the app you just created.</li>\r\n            <li>Click on `Settings` and toggle `Reveal Config Vars`.</li>\r\n            <li>Set `MY_LIFF_ID` as the key and the LIFF ID as the value.</li>\r\n            <li>\r\n              Your app should be up and running. Enter the URL of your app in a\r\n              web browser.\r\n            </li>\r\n          </ol>\r\n        </code>\r\n        <p>\r\n          If you are using any other platform, please add your LIFF ID in the{\" \"}\r\n          <code>index.html</code> file.\r\n        </p>\r\n        <p>\r\n          For more information about how to add your LIFF ID, see{\" \"}\r\n          <a href=\"https://developers.line.biz/en/reference/liff/#initialize-liff-app\">\r\n            Initializing the LIFF app\r\n          </a>\r\n          .\r\n        </p>\r\n      </div>\r\n      {/* <!-- LIFF INIT ERROR --> */}\r\n      <div id=\"liffInitErrorMessage\" className=\"hidden\">\r\n        <p>Something went wrong with LIFF initialization.</p>\r\n        <p>\r\n          LIFF initialization can fail if a user clicks \"Cancel\" on the \"Grant\r\n          permission\" screen, or if an error occurs in the process of{\" \"}\r\n          <code>liff.init()</code>.\r\n        </p>\r\n      </div>\r\n      {/* <!-- NODE.JS LIFF ID ERROR --> */}\r\n      <div id=\"nodeLiffIdErrorMessage\" className=\"hidden\">\r\n        <p>Unable to receive the LIFF ID as an environment variable.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}