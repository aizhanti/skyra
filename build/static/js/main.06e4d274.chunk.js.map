{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","useEffect","fetch","then","reqResponse","console","log","body","json","jsonResponse","myLiffId","window","liff","init","liffId","isLoggedIn","catch","err","initializeLiff","initializeLiffOrDie","id","error","className","onClick","mode","res","href","login","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gJAAAA,EAAOC,QAAU,IAA0B,kC,oHCyP5BC,MArPf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBA4Gb,OA5Ga,UAQbC,qBAAU,WAiBRC,MAAM,YACHC,MAAK,SAAUC,GAEd,OADAC,QAAQC,IAAI,cAAeF,EAAYG,MAChCH,EAAYI,UAEpBL,MAAK,SAAUM,GACdJ,QAAQC,IAAI,kBAAmBG,GASrC,SAA6BC,GACtBA,GAQP,SAAwBA,GACtBL,QAAQC,IAAI,cAAeI,GAC3BC,OAAOC,KACJC,KAAK,CACJC,OAAQJ,IAETP,MAAK,WAiBJQ,OAAOC,KAAKG,gBAbbC,OAAM,SAACC,GACNZ,QAAQC,IAAIW,MAfdC,CAAeR,GAZbS,CADWV,EAAaW,OAGzBJ,OAAM,SAAUK,GACfhB,QAAQC,IAAIe,QA1Bf,IAmGD,yBAAKC,UAAU,OACb,yBAAKF,GAAG,kBAEN,yBAAKE,UAAU,eACb,yBAAKA,UAAU,cAGf,yBAAKA,UAAU,aACb,4BAAQF,GAAG,mBAAmBG,QAAS,WAd/CrB,MAAM,0CAA0CC,MAAK,SAACc,GAAD,OACnDZ,QAAQC,IAAIW,QAaN,oBAGA,4BAAQG,GAAG,oBAAoBG,QAAS,WA3GhDrB,MAAM,kCAAmC,CAAEsB,KAAM,SAAUrB,MAAK,SAACsB,GAAD,OAC9DpB,QAAQC,IAAImB,QA0GN,cAIF,yBAAKH,UAAU,aACb,4BAAQF,GAAG,kBAAX,oBACA,4BAAQA,GAAG,oBAAX,iBAGJ,yBAAKA,GAAG,6BAER,yBAAKA,GAAG,kBAAkBE,UAAU,mBAClC,4CACA,uBAAGI,KAAK,KAAR,sBACA,+BACE,4BACE,2CACA,wBAAIN,GAAG,wBAKb,yBAAKA,GAAG,SAASE,UAAU,mBACzB,8CACA,uBAAGI,KAAK,KAAR,+BACA,+BACE,4BACE,+CACA,wBAAIN,GAAG,mBAKb,yBAAKA,GAAG,cAAcE,UAAU,mBAC9B,uCACA,uBAAGI,KAAK,KAAR,iBACA,yBAAKN,GAAG,sBACR,+BACE,4BACE,sCACA,wBAAIA,GAAG,wBAET,4BACE,2CACA,wBAAIA,GAAG,sBAET,4BACE,6CACA,wBAAIA,GAAG,0BAKb,yBAAKE,UAAU,eACb,4BAAQF,GAAG,kBAAkBG,QAAS,WA9FvCZ,OAAOC,KAAKG,cAKfJ,OAAOC,KAAKe,UAyFR,UAIA,4BAAQP,GAAG,oBAAX,YAEF,yBAAKA,GAAG,iBACN,yBAAKA,GAAG,sBACR,yBAAKA,GAAG,uBACN,iHAIA,iDACsB,IACpB,uBAAGM,KAAK,sEAAR,sBAEK,IAJP,4BAWN,yBAAKN,GAAG,qBAAqBE,UAAU,UACrC,2EACA,0KAEwE,KAExE,0BAAMF,GAAG,cACP,4BACE,yEACA,kEACA,oFACA,yFACA,gHAMJ,iGACsE,IACpE,4CAFF,UAIA,qFAC0D,IACxD,uBAAGM,KAAK,sEAAR,6BAFF,MASF,yBAAKN,GAAG,uBAAuBE,UAAU,UACvC,6EACA,8JAE8D,IAC5D,6CAHF,MAOF,yBAAKF,GAAG,yBAAyBE,UAAU,UACzC,2FCvOYM,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdzB,OAAM,SAAAK,GACLhB,QAAQgB,MAAMA,EAAMqB,c","file":"static/js/main.06e4d274.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  const [liff, setLiff] = useState(\"\");\n\n  // const client = LineClient.connect({\n  //   accessToken: process.env.ACCESS_TOKEN,\n  //   channelSecret: process.env.CHANNEL_SECRET,\n  // });\n\n  useEffect(() => {\n    initialize();\n  }, []);\n\n  function sendJoke() {\n    fetch(\"http://localhost:9000/send-joke\", { mode: \"cors\" }).then((res) =>\n      console.log(res)\n    );\n  }\n\n  function sendMessages() {\n    fetch(\"/send-messages\", { mode: \"cors\" }).then((res) => console.log(res));\n  }\n\n  function initialize() {\n    let myLiffId = \"\";\n\n    fetch(\"/send-id\")\n      .then(function (reqResponse) {\n        console.log(\"reqResponse\", reqResponse.body);\n        return reqResponse.json();\n      })\n      .then(function (jsonResponse) {\n        console.log(\"jsonresponseeee\", jsonResponse);\n        myLiffId = jsonResponse.id;\n        initializeLiffOrDie(myLiffId);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  function initializeLiffOrDie(myLiffId) {\n    if (!myLiffId) {\n      // document.getElementById(\"liffAppContent\").classList.add('hidden');\n      // document.getElementById(\"liffIdErrorMessage\").classList.remove('hidden');\n    } else {\n      initializeLiff(myLiffId);\n    }\n  }\n\n  function initializeLiff(myLiffId) {\n    console.log(\"myLIffidddd\", myLiffId);\n    window.liff\n      .init({\n        liffId: myLiffId,\n      })\n      .then(() => {\n        // start to use LIFF's api\n        initializeApp();\n      })\n      .catch((err) => {\n        console.log(err);\n        // document.getElementById(\"liffAppContent\").classList.add('hidden');\n        // document.getElementById(\"liffInitErrorMessage\").classList.remove('hidden');\n      });\n  }\n\n  function initializeApp() {\n    // displayLiffData();\n    // displayIsInClientInfo();\n    // registerButtonHandlers();\n\n    // check if the user is logged in/out, and disable inappropriate button\n    if (window.liff.isLoggedIn()) {\n      // document.getElementById('liffLoginButton').disabled = true;\n    } else {\n      // document.getElementById('liffLogoutButton').disabled = true;\n    }\n  }\n\n  function loginClick() {\n    if (!window.liff.isLoggedIn()) {\n      // set `redirectUri` to redirect the user to a URL other than the front page of your LIFF app.\n\n      //window.liff.login({ redirectUri: \"http://localhost:3000\" });\n\n      window.liff.login();\n    }\n  }\n\n  function getUserId() {\n    window.liff\n      .getProfile()\n      .then((profile) => {\n        const profileName = profile.displayName;\n        const id = profile.userId;\n        console.log(profileName, id);\n      })\n      .catch((err) => {\n        console.log(\"error\", err);\n      });\n  }\n\n  function getCovidStatus() {\n    fetch(\"http://localhost:9000/get-covid-status\").then((err) =>\n      console.log(err)\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"liffAppContent\">\n        {/* <!-- ACTION BUTTONS --> */}\n        <div className=\"buttonGroup\">\n          <div className=\"buttonRow\">\n            {/* <button onClick={() => generateJoke()}>TEST BUTTON</button> */}\n          </div>\n          <div className=\"buttonRow\">\n            <button id=\"scanQrCodeButton\" onClick={() => getCovidStatus()}>\n              Get COVID Status\n            </button>\n            <button id=\"sendMessageButton\" onClick={() => sendJoke()}>\n              Send Joke\n            </button>\n          </div>\n          <div className=\"buttonRow\">\n            <button id=\"getAccessToken\">Get Access Token</button>\n            <button id=\"getProfileButton\">Get Profile</button>\n          </div>\n        </div>\n        <div id=\"shareTargetPickerMessage\"></div>\n        {/* <!-- ACCESS TOKEN DATA --> */}\n        <div id=\"accessTokenData\" className=\"hidden textLeft\">\n          <h2>Access Token</h2>\n          <a href=\"#\">Close Access Token</a>\n          <table>\n            <tr>\n              <th>accessToken</th>\n              <td id=\"accessTokenField\"></td>\n            </tr>\n          </table>\n        </div>\n        {/* <!-- SCAN QR RESULT --> */}\n        <div id=\"scanQr\" className=\"hidden textLeft\">\n          <h2>QR Code reader</h2>\n          <a href=\"#\">Close QR Code Reader Result</a>\n          <table>\n            <tr>\n              <th>scanCode Result</th>\n              <td id=\"scanQrField\"></td>\n            </tr>\n          </table>\n        </div>\n        {/* <!-- PROFILE INFO --> */}\n        <div id=\"profileInfo\" className=\"hidden textLeft\">\n          <h2>Profile</h2>\n          <a href=\"#\">Close Profile</a>\n          <div id=\"profilePictureDiv\"></div>\n          <table>\n            <tr>\n              <th>userId</th>\n              <td id=\"userIdProfileField\"></td>\n            </tr>\n            <tr>\n              <th>displayName</th>\n              <td id=\"displayNameField\"></td>\n            </tr>\n            <tr>\n              <th>statusMessage</th>\n              <td id=\"statusMessageField\"></td>\n            </tr>\n          </table>\n        </div>\n        {/* <!-- LOGIN LOGOUT BUTTONS --> */}\n        <div className=\"buttonGroup\">\n          <button id=\"liffLoginButton\" onClick={() => loginClick()}>\n            Log in\n          </button>\n          {/* <button id=\"liffLoginButton\" >Log in</button> */}\n          <button id=\"liffLogoutButton\">Log out</button>\n        </div>\n        <div id=\"statusMessage\">\n          <div id=\"isInClientMessage\"></div>\n          <div id=\"apiReferenceMessage\">\n            <p>\n              Available LIFF methods vary depending on the browser you use to\n              open the LIFF app.\n            </p>\n            <p>\n              Please refer to the{\" \"}\n              <a href=\"https://developers.line.biz/en/reference/liff/#initialize-liff-app\">\n                API reference page\n              </a>{\" \"}\n              for more information.\n            </p>\n          </div>\n        </div>\n      </div>\n      {/* <!-- LIFF ID ERROR --> */}\n      <div id=\"liffIdErrorMessage\" className=\"hidden\">\n        <p>You have not assigned any value for LIFF ID.</p>\n        <p>\n          If you are running the app using Node.js, please set the LIFF ID as an\n          environment variable in your Heroku account follwing the below steps:{\" \"}\n        </p>\n        <code id=\"code-block\">\n          <ol>\n            <li>Go to `Dashboard` in your Heroku account.</li>\n            <li>Click on the app you just created.</li>\n            <li>Click on `Settings` and toggle `Reveal Config Vars`.</li>\n            <li>Set `MY_LIFF_ID` as the key and the LIFF ID as the value.</li>\n            <li>\n              Your app should be up and running. Enter the URL of your app in a\n              web browser.\n            </li>\n          </ol>\n        </code>\n        <p>\n          If you are using any other platform, please add your LIFF ID in the{\" \"}\n          <code>index.html</code> file.\n        </p>\n        <p>\n          For more information about how to add your LIFF ID, see{\" \"}\n          <a href=\"https://developers.line.biz/en/reference/liff/#initialize-liff-app\">\n            Initializing the LIFF app\n          </a>\n          .\n        </p>\n      </div>\n      {/* <!-- LIFF INIT ERROR --> */}\n      <div id=\"liffInitErrorMessage\" className=\"hidden\">\n        <p>Something went wrong with LIFF initialization.</p>\n        <p>\n          LIFF initialization can fail if a user clicks \"Cancel\" on the \"Grant\n          permission\" screen, or if an error occurs in the process of{\" \"}\n          <code>liff.init()</code>.\n        </p>\n      </div>\n      {/* <!-- NODE.JS LIFF ID ERROR --> */}\n      <div id=\"nodeLiffIdErrorMessage\" className=\"hidden\">\n        <p>Unable to receive the LIFF ID as an environment variable.</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}